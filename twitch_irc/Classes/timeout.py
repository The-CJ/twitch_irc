import re
from .channel import Channel
from .user import User

ReBanDuration:"re.Pattern" = re.compile(r"ban-duration=(\d+?)[; ]")
ReRoomID:"re.Pattern" = re.compile(r"room-id=(\d+?)[; ]")
ReTargetUserID:"re.Pattern" = re.compile(r"target-user-id=(\d+?)[; ]")

class Timeout(object):
	"""
	This class is is something like a "testing" class,
	on every CLEARCHAT event, we try to make a Timeout class,

	if this resulting class don't have a valid duration field, its a ban
	if there is no valid target_user_id it a Clear event.

	All of this should be handled by the handleClearChat() function in Utils/handler.py
	However a valid Timeout Class should have a user and a channel class attached to it.
	"""
	def __repr__(self):
		return f"<{self.__class__.__name__} channel='{self.room_id}' user='{self.target_user_id}' duration={self.duration}>"

	def __init__(self, raw:str):

		self.duration:int = None
		self.room_id:str = None
		self.target_user_id:str = None

		self.User:User = None
		self.Channel:Channel = None

		self.buildFromEvent(raw)

	def buildFromEvent(self, raw:str) -> None:
		"""
		generated by a CLEARCHAT event, like this

		Ban: @room-id=94638902;target-user-id=67664971;tmi-sent-ts=1596404852076 :tmi.twitch.tv CLEARCHAT #phaazebot :the__cj
		Timeout: @ban-duration=600;room-id=94638902;target-user-id=67664971;tmi-sent-ts=1596404919791 :tmi.twitch.tv CLEARCHAT #phaazebot :the__cj
		Clear: @room-id=94638902;tmi-sent-ts=1596203495549 :tmi.twitch.tv CLEARCHAT #phaazebot
		"""

		#ban-duration
		search:re.Match = re.search(ReBanDuration, raw)
		if search != None:
			self.duration = int( search.group(1) )

		#room_id
		search = re.search(ReRoomID, raw)
		if search != None:
			self.room_id = search.group(1)

		#target_user_id
		search = re.search(ReTargetUserID, raw)
		if search != None:
			self.target_user_id = search.group(1)

class Ban(Timeout):
	"""
	A simple subclass of a timeout, because a timeout without duration, is indeed a ban
	"""
	def __repr__(self):
		return f"<{self.__class__.__name__} channel='{self.room_id}' user='{self.target_user_id}'>"

	def __init__(self, Time:Timeout):

		self.room_id:str = Time.room_id
		self.target_user_id:str = Time.target_user_id

		self.User:User = None
		self.Channel:Channel = None
